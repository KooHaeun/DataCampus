결론. 우리가 가진 데이터로 가장 높은 accuracy 를 가지는 데이터가

z를 제외한 모든 점 벡터 + 검지-중지-약지 tip 거리데이터, 검지-중지-약지 각도차이 데이터


1. 벡터화 시키면 어느 포인트를 기준으로 모든 점들을 이쁘게 옮기는 것은 해결

2. 크기 정규화는 
기존의 벡터의 크기에서 min 값과 max 값의 차이가
가장 작은 것을 기준으로 할지,
-> 가장 좋은 정규화로 생각 된다.
방법 : min 값과 max 값의 차이가 가장 작은 것 = 데이터의 편차가 가장 작은 마디
를 찾아서 각각의 이미지 파일의 그 마디 벡터의 크기를 1로 만들어주고
각각의 데이터에서 1로 만들어 준 만큼 다른 마디 데이터들을 보정시켜주는 것.
손의 개별적 특성 차이을 가장 잘 보존하면서도, 손의 형태를 가장 잘 유지하였음.



혹은 min 값이나 max 값이 가장 작은 것 혹은 가장 큰 것으로 할지,
- 무의미해보임
가장 큰것을 혹은 가장 작은 것을 기준으로 하는 것은 너무 극단적인 데이터고
가장 균형있게 이것을 다룬게 첫번째 크기 정규화 방법으로 보임
가장 작은 것을 단위 벡터로 만들면 데이터 뻥튀기가 가능하지만,
단위의 차이는 그 비율이 동등하기 때문에 연산하는데는 거기서 거기임.
이런 관점이면 크기 정규화는 어떻게 하든 다 거기서 거기라는 결론이 나오는데...
모든 것이 무의미하게 되는 멍청한 결론은 내리지 않는걸로 하고
min(벡터사이즈)=1로 만드는 방향으로 해보는 것으로 하자.
=> 첫번째 방법보다 낮은 정확도를 보임.
완성하고 보니 첫번째 방법이 가장 올바른 정규화로 사유됨.
왜냐하면 손가락 각 마디 중에 데이터의 편차가 가장 작은 마디를 찾아낸 후에
편차가 가장 작은 마디 데이터를 기준으로 각각의 손 이미지를 최적화 시킨 것이기에
가장 올바른 정규화인것 같다.

혹은 예전에 이야기 했던 가장 똑바르게 인식 하는
2,3번 랜드마크의 크기를 특정 크기로 설정하는 방향으로 정규화 할지
- 2, 3번 랜드마크가 카메라에 정면으로 찍히기 때문에 
handtracking때 가장 정확하게 인식 되는 landmark로 예상된다.
이것을 기준으로 크기 정규화를 해보는 것.
결과는 해봐야 안다.



결과는 첫번째 방법으로 하는 것이 제일 높은 정확도!! 확인했음...


3. 회전이 문제..

좌상단이 (0,0), 우하단이 (1,1)이라 회전을 하면 좌상단을 기준으로 회전을 할텐데
이거는 어차피 모든 데이터 셋에 동일하게 적용하는 관성계이기에
상관은 없다고 해도

어느 데이터의 기준에다 맞출 것인지...

크기 기준이 되는 vector를 축으로 하며 모든 손의 landmark를
그 축을 동일하게 해주면 되는지.

그럼 어떻게 회전시켜야하는지는...

만약 (2,3) 랜드마크를 크기 정규화의 기준으로 한다면

각 이미지 데이터의(2,3)의 크기와 방향을 모두 동일하게 정규화 하는 방향으로!